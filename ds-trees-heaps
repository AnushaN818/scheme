(define (make-tree value left right)
  (list value left right))
(define (value tree) (car tree))
(define (left tree) (cadr tree))
(define (right tree) (caddr tree))
(define empty-tree? null?)
(define (collapse l)
  (cond ((null? l) l)
        ((pair? l)
         (append (collapse (car l)) (collapse (cdr l))))
        (else
         (list l)
               )
        )
  )

(define (bst-smallest bs-tree)
  (if (empty-tree? bs-tree)
      '()
      (if (empty-tree? (left bs-tree))
          (value bs-tree)
          (bst-smallest (left bs-tree))
          )
      )
  )
(define (bst-largest bs-tree)
  (if (empty-tree? bs-tree)
      '()
      (if (empty-tree? (right bs-tree))
          (value bs-tree)
          (bst-largest (right bs-tree))
          )
      )
  )


(define (bst? T)
  (cond ((null? T)
         #t)
        ((and (null? (right T)) (null? (left T)))
         #t)
        ((null? (right T))
         (and (> (value T) (bst-largest (left-tree btree)))
              (bst? (left T))))
        ((null? (left T))
         (and (< (value T) (bst-smallest (right T)))
              (bst? (right T))))
        (else                           
         (and (> (value T) (bst-largest (left T)))
              (< (value T) (bst-smallest (right T)))
              (bst? (left T))
              (bst? (right T))))))




(bst? (make-tree 28
                 (make-tree 22
                            (make-tree 11 (list) (list))
                            (make-tree 23 (list) (list)))
                 (make-tree 36 (list) (make-tree 54 (list) (list))))) 

(bst? (make-tree 10
                 (make-tree 5
                            (make-tree 4 (list) (list))
                            (make-tree 11 (list) (list)))
                 (make-tree 12 (list) (list))))

"problem 2a"
(define (rotate-left T)
  (cond ((null? T)
         T)
        ((and (null? (right T))
              (null? (left T)))
         T)
        ((null? (right T))
         T)
        ((null? (left T))
                (make-tree (value (right T))
                           (make-tree (value T)
                                      '()
                                      (left (right T)))
                            (right (right T))
                            )
                )
         (else (make-tree
                (value (right T))
                       (make-tree (value T)
                                  (left T)
                                  (left (right T)))
                       
                (right (right T)
                                  )
                       )
                )
               
         )
  )
                                  
(rotate-left (make-tree 10 '() (make-tree 15 '() '()) ))
(rotate-left (make-tree 10 '() (make-tree 15 (make-tree 12 '() '()) '())))
"problem 2b"
(define (rotate-right T)
  (cond ((null? T)
      T)
      ((and (null? (right T)) (null? (left T)))
       T)
      ((null? (left T))
       T)
      ((null? (right T))
       (make-tree (value (left T))
                  (left (left T))
                  (make-tree (value T)
                             (right (left T))
                             '()
                             )
                  )
       )
       (else (make-tree
       (value (left T))
       (left (left T))
       (make-tree (value T)
                  (right (left T))
                  (right T)
                  )
       )
      )
  )
  )
      

(rotate-right (make-tree 10 (make-tree 5 '() '()) '() ))

(rotate-right (make-tree 10 (make-tree 5 (make-tree 2 '() '()) '()) '()))

"problem 2c"
"helper from lab 8"
(define (tree-node-count t)
  (if (null? t)
      0
      (+ 1
         (tree-node-count (left t))
         (tree-node-count (right t)))
      )
  )

(define (depth t)
  (cond ((null? t) 0)
        ((= (tree-node-count t) 1) 1)
        ((and (left t) (null? (right t)))
         (+ 1 (depth (left t))))
        ((and (right t) (null? (left t)))
         (+ 1 (depth (right t))))
        (else
         (+ (max (depth (left t)) (depth (right t))) 1))
        )
  )

(define (tree-repair T)
  (cond
    ((null? T) T)
    ((and (null? (right T)) (null? (left T)))
         T)
    ((<= (abs (- (depth (right T)) (depth (left T)))) 1)
     T)
    ((> (depth (left T)) (+ (depth (right T)) 1))
        (tree-repair (rotate-right T)))
    ((> (depth (right T)) (+ (depth (left T)) 1))
         (tree-repair (rotate-left T)))
  
  )
  )
    
(tree-repair (make-tree 3 (make-tree 2 (make-tree 1 '() '()) '()) '()))
        
      
"problem 3"
"helper functions"
(define (create-heap v H1 H2)  (list v H1 H2))
(define (h-min H) (car H))
(define (left H)  (cadr H))
(define (right H) (caddr H))
(define (insert x H)
  (if (null? H)
      (create-heap x '() '())
      (let ((child-value (max x (h-min H)))
            (root-value  (min x (h-min H))))
        (create-heap root-value
                     (right H)
                   (insert child-value (left H))))))
(define (max-f less a b)
  (if (less a b)
      b
      a
      ))

(define (min-f less a b)
  (if (less a b)
      a
      b))

(define (heap-insert f x H)
  (if (null? H)
      (create-heap x '() '())
      (let ((child-value (max-f f x (h-min H)))
            (root-value  (min-f f x (h-min H))))
        (create-heap root-value
                     (right H)
                     (heap-insert f child-value (left H))))))

(define (heap-insert-list f elements H)
  (if (null? elements)
      H
      (heap-insert-list f (cdr elements) (heap-insert f (car elements) H))
     )
  )
"combine heaps"
(define (combine-heaps H1 H2)
  (cond ((null? H1) H2)
        ((null? H2) H1)
        ((< (h-min H1)
            (h-min H2))
         (create-heap (h-min H1)
                      H2
                      (combine-heaps (left H1) (right H1))))
        (else
         (create-heap (h-min H2)
                      H1
                      (combine-heaps (left H2) (right H2))))))
"extract-min and max"
(define (extract-min H)
  (combine-heaps (left H) (right H))
  )
(define (extract-max H)
  (combine-heaps (left H) (right H)))

"problem 3"
(define (hsort elements)
  (let ((H (heap-insert-list < elements '())))
  (if (null? elements)
      '()
      (append (list (car H)) (hsort (collapse (extract-min H))))
      )
    )
  )
 
"problem 4a"
(define (size1 H)
  (car (car H)))
(define (heap1 H)
  (cdr (car H)))
(define (size2 H)
  (car (cdr H)))
(define (heap2 H)
 (cdr (cdr H)))
"function"
(define (equalize-heaps heap-pair)
  (let*
    ((s1 (car (car heap-pair)))
    (s2  (car (cdr heap-pair)))
    (h1  (cdr (car heap-pair)))
    (h2  (cdr (cdr heap-pair))))
  (cond ((and (= s1 0) (= s2 0))
         heap-pair)
        ((and (= s1 0) (> s2 1))
         (equalize-heaps
          (cons
           (cons (+ s1 1)
                 (create-heap
                  (h-min h2)
                  '()
                  '()))
           (cons (- s2 1)
                 (extract-max h2)))))
        ((and (> s1 1) (= s2 0))
         (equalize-heaps
          (cons
           (cons (- s1 1) (extract-min h1))
           (cons (+ s2 1) (heap-insert <
                                       (h-min h1)
                                       '())))))
         ((<= (abs (- s1 s2)) 1) heap-pair)
         ((> s1 s2)
          (equalize-heaps
           (cons
            (cons (- s1 1) (extract-max h1))
            (cons (+ s2 1) (heap-insert <
                                        (h-min h1)
                                        h2)))))
         ((< s1 s2)
          (equalize-heaps
           (cons
            (cons (+ s1 1) (heap-insert >
                                        (h-min h2)
                                        h1))
            (cons (- s2 1) (extract-max h2)))))
         )
    )
  )

"problem 4b"
(define (add-number x heap-pair)
  (cond ((or (and (= (size1 heap-pair) 0)
              (= (size2 heap-pair)) 0)
             (and (= (size1 heap-pair) 0)
                  (not (= (size2 heap-pair)) 0)))
         (equalize-heaps (cons
           (cons (size1 heap-pair)
                 (heap1 heap-pair))
           (cons (+ (size2 heap-pair) 1)
                 (insert < x (heap2 heap-pair))
                 )
           )
         )
         )
        ((< x (h-min (heap2 heap-pair)))
         (equalize-heaps
          (cons
           (cons (+ (size1 heap-pair) 1)
                 (heap-insert > x (heap1 heap-pair)))
           (cons (size1 heap-pair)
                 (heap2 heap-pair)))))
        (else
         (equalize-heaps
          (cons
          (cons (size1 heap-pair)
                 (heap1 heap-pair))
           (cons (+ (size2 heap-pair) 1)
                 (heap-insert < x (heap2 heap-pair))
                 )
           )
         )
        )
  ))

(add-number 2 '((1 1 ()()) 1 10 ()()) )

(define (get-median heap-pair)
  (let ((newheap (equalize-heaps heap-pair)))
    (cond ((= (size1 newheap) (size2 newheap))
        (/ (+ (h-min (heap1 newheap)) (h-min (heap2 newheap))) 2))
          ((> (size1 newheap) (size2 newheap))
           (h-min (heap1 newheap)))
          ((< (size1 newheap) (size2 newheap))
           (h-min (heap2 newheap))))
    )
  )
(get-median '((1 1 ()()) 1 10 ()()) ) 
